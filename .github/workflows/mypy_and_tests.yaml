name: testing workflow

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 60
      COVERAGE_TOTAL: 60
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Lint with mypy
      #----------------------------------------------
      - name: Mypy check
        run: |
          poetry run mypy --config-file mypy.ini .
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          poetry run pytest .
        env:
          DB_USER: postgres
          DB_NAME: postgres
          DB_HOST: localhost
          DB_PASS: postgres
          # FastAPI config
          APP_NAME: FastAPI
          API_VERSION: 0.0.1
          DOCS_URL: /docs
          REDOC_URL: /redoc
          DEFAULT_OPEN_API_ROOT: /openapi.json
          IS_PRODUCTION: False
          # Redis config
          REDIS_HOST: localhost
          REDIS_PASSWORD: password
import sqlalchemy as sa
import sqlalchemy.ext.declarative
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.orm import sessionmaker, DeclarativeMeta
from sqlalchemy.sql.ddl import CreateColumn

from data.config import CONNECTION_URL

Base = sa.ext.declarative.declarative_base()

engine = create_async_engine(CONNECTION_URL, echo=False, pool_size=40,
                             max_overflow=0)

Session = sessionmaker(bind=engine, expire_on_commit=False,
                       class_=AsyncSession, autocommit=False)


@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kw):
    text = compiler.visit_create_column(element, **kw)
    text = text.replace("SERIAL", "INT GENERATED BY DEFAULT AS IDENTITY")
    return text


async def connect(recreate: bool = False) -> None:
    if recreate:
        async with engine.begin() as conn:
            # Создаем таблицы если их нету
            await conn.run_sync(Base.metadata.drop_all)
            await conn.run_sync(Base.metadata.create_all)
    Session.configure(bind=engine)


__all__ = (
    'Base',
    'Session',
    'connect'
)
